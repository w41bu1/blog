[{"content":"Introduction WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Do you want me to also polish the writing into a more natural technical blog style (less literal, more like a native English blog post), or keep it as is (direct translation)?\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"Introduction WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Do you want me to also polish the writing into a more natural technical blog style (less literal, more like a native English blog post), or keep it as is (direct translation)?\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"Introduction WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"Introduction WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":" Introduction WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size ","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); Check with your hosting provider Some shared hosting environments don’t allow direct changes to PHP settings. In this case, you’ll need to request support to increase the upload limit.\n👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); Check with your hosting provider Some shared hosting environments don’t allow direct changes to PHP settings. In this case, you’ll need to request support to increase the upload limit.\n👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); Check with your hosting provider Some shared hosting environments don’t allow direct changes to PHP settings. In this case, you’ll need to request support to increase the upload limit.\n👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); Check with your hosting provider Some shared hosting environments don’t allow direct changes to PHP settings. In this case, you’ll need to request support to increase the upload limit.\n👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); Check with your hosting provider Some shared hosting environments don’t allow direct changes to PHP settings. In this case, you’ll need to request support to increase the upload limit.\n👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); Check with your hosting provider Some shared hosting environments don’t allow direct changes to PHP settings. In this case, you’ll need to request support to increase the upload limit.\n👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); Check with your hosting provider Some shared hosting environments don’t allow direct changes to PHP settings. In this case, you’ll need to request support to increase the upload limit.\n👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. {: .prompt-info } Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-08-21-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"}]